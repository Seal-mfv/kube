version: 2.1

# You have to set the following Environment Variables from Project Settings on Circle CI
# - SONAR_HOST_URL (e.g. https://sonar.mfvn.dev/)
# - SONAR_TOKEN

orbs:
  slack: circleci/slack@5.1.1
  aws-cli: circleci/aws-cli@5.4.1
  aws-ecr: circleci/aws-ecr@9.5.4

executors:
  go-docker:
    working_directory: "~/golang-backend-boilerplate" # You have to set your own service name
    docker:
      - image: cimg/go:1.24.1
    resource_class: medium
  machine-docker:
    working_directory: "~/golang-backend-boilerplate" # You have to set your own service name
    machine:
      image: ubuntu-2204:current
      docker_layer_caching: true
    resource_class: medium

# Define reusable values.
anchors:
  # This step notifies Slack when the pipeline fails on the `main` branch.
  notify_failure_on_main_branch: &notify_failure_on_main_branch
    when:
      condition:
        equal: [main, << pipeline.git.branch >>]
      steps:
        - slack/notify:
            event: fail
            mentions: "@golang-backend-boilerplate_devs" # Update this to your Slack team's username

jobs:
  noop:
    executor: go-docker
    steps:
      - run:
          name: Noop
          command: echo "Noop"
  lint:
    executor: go-docker
    steps:
      - checkout
      - run:
          name: install dependencies
          command: make install-modules
      - run:
          name: install tools
          command: make install-tools
      - run:
          name: Run linter
          command: make lint
      - <<: *notify_failure_on_main_branch
  ut:
    executor: go-docker
    steps:
      - checkout
      # Needed to use testcontainers
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: install dependencies
          command: make install-modules
      - run:
          name: Run unit test
          command: make ut
      - <<: *notify_failure_on_main_branch
  docker-build-and-push:
    executor: machine-docker
    parameters:
      aws-account:
        type: string
        default: ${AWS_ACCOUNT}
      aws-role-arn:
        type: string
        default: ${AWS_ROLE_ARN}
      aws-region:
        type: string
        default: ${AWS_DEFAULT_REGION}
      image-name:
        description: "Name of the image and ECR repository to push the Docker image to"
        type: string
        default: ${CIRCLE_PROJECT_REPONAME}
      image-tag:
        description: "Docker image tag, typically based on branch and commit SHA"
        type: string
        default: ${CIRCLE_BRANCH}-${CIRCLE_SHA1}
      dockerfile:
        description: "Relative path to the Dockerfile from the working directory"
        type: string
    steps:
      - aws-ecr/build_and_push_image:
          account_id: << parameters.aws-account >>
          auth:
            - aws-cli/setup:
                profile_name: "OIDC_PROFILE"
                role_arn: $AWS_ROLE_ARN
                session_duration: "1800"
          path: << parameters.dockerfile >>
          repo: << parameters.image-name >>
          extra_build_args: "--provenance=false"
          tag: << parameters.image-tag >>
          profile_name: "OIDC_PROFILE"
      - <<: *notify_failure_on_main_branch
  branch_test:
    executor: go-docker
    environment:
      TEST_RESULTS_DIR: /tmp/test_results
    steps:
      - checkout
      # Needed to use testcontainers
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Run test for coverage
          command: |
            go install github.com/rillig/gobco@v1.3.4
            if [[ "${CIRCLE_BRANCH}" == main ]]; then
                ./scripts/branch-test.sh all "${TEST_RESULTS_DIR}"
            elif [[ -n "${CI_PULL_REQUEST}" ]]; then
                ./scripts/branch-test.sh pr "${TEST_RESULTS_DIR}"
            else
                echo "Not a target for SonarQube analysis."
                mkdir -p "${TEST_RESULTS_DIR}"
                touch "${TEST_RESULTS_DIR}/branch-coverage.xml"
            fi
      - persist_to_workspace:
          root: /tmp/test_results
          paths:
            - branch-coverage.xml
      - store_artifacts:
          path: /tmp/test_results
  sonarqube_analysis:
    resource_class: large
    docker:
      - image: sonarsource/sonar-scanner-cli:11.3
    environment:
      TEST_RESULTS_DIR: /tmp/test_results
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/test_results
      - run:
          name: Update properties to upload coverage report
          command: |
            if [[ -f "${TEST_RESULTS_DIR}/branch-coverage.xml" ]]; then
              echo "sonar.coverageReportPaths=${TEST_RESULTS_DIR}/branch-coverage.xml" >> ./sonar-project.properties
            fi
      - run:
          name: Run SonarQube Analysis
          command: |
            if [[ "${CIRCLE_BRANCH}" == main ]]; then
                # Only run full code SonarQube analysis on main branch
                sonar-scanner \
                  -Dsonar.host.url=${SONAR_HOST_URL} \
                  -Dsonar.branch.name=${CIRCLE_BRANCH}
            elif [[ -n "${CI_PULL_REQUEST}" ]]; then
                # Only run SonarQube analysis on branches that have a PR
                sonar-scanner \
                    -Dsonar.host.url=${SONAR_HOST_URL} \
                    -Dsonar.pullrequest.branch=${CIRCLE_BRANCH} \
                    -Dsonar.pullrequest.base=main \
                    -Dsonar.pullrequest.key=${CI_PULL_REQUEST#https://github.com/moneyforward/golang-backend-boilerplate/pull/} # You have to set your own service name
            else
                echo "Not a target for SonarQube analysis."
            fi

workflows:
  build:
    jobs:
      - lint
      - ut
      - docker-build-and-push:
          name: golang-backend-boilerplate-office # You have to set your own name
          image-name: golang-backend-boilerplate # You have to set your own repo
          image-tag: ${CIRCLE_BRANCH}${CIRCLE_TAG:+-${CIRCLE_TAG}}-${CIRCLE_SHA1}
          dockerfile: deploy/dockerfile
          context:
            - github_developer_read_packages
            # Set your own deploy-role context
            # - AWS_ACCOUNT (e.g. 202732020874)
            # - AWS_DEFAULT_REGION (e.g. ap-northeast-1)
            # - AWS_ROLE_ARN (e.g. arn:aws:iam::757836524150:role/deploy/deploy-role-<project>)
            # - deploy-role-golang-backend-boilerplate
          requires:
            - lint
            - ut
          filters:
            branches:
              only:
                - main
  sonarqube:
    jobs:
      - branch_test
      - sonarqube_analysis:
          requires:
            - branch_test
          filters:
            branches:
              ignore: /^dependabot\/.*/
